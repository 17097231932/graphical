def compute(equation: str, **kwargs) -> int or float: ...

class Graphical_metaclass(type):
    def __new__(cls, name: str, bases: tuple, classdict: dict) -> type: ...

class Graphical(object, metaclass=Graphical_metaclass):
    def __init__(self, **kwargs) -> None: ...

    def __call__(self) -> str: ...

    @classmethod
    def buildtoJSON(cls) -> str: ...
    
    def __repr__(self) -> str: ...
    
    def __str__(self) -> str: ...

class Extension(object):

    def __init__(self, name: str, function: object) -> None: ...

    def get_name(self) -> str: ...

    def get_function(self) -> object: ...

def parameter(*args, **kwargs) -> list: ...

class Integrated_Graphical(object):

    def __init__(self, **kwargs) -> None: ...
    
    def getresult(self, name: str) -> int or float: ...
    
    def __getattr__(self, name: str) -> int or float: ...
    
    def __call__(self, variable: str) -> int or float: ...

    def __getitem__(self, key: str) -> int or float: ...

def loadfromJSON(json: str) -> type: ...